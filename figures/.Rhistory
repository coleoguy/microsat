phy = trees[[i]],
nsim = 100)
results[i, 1] <- summary(aov(lm(bp.Mbp ~ holo.or.mono)))$coefficients[2,4]
summary(aov(lm(bp.Mbp ~ holo.or.mono)))$coefficients[2,4]
foo <- summary(aov(lm(bp.Mbp ~ holo.or.mono)))
foo
foo[1,5]
unlist(foo[1,5])
unlist(foo)
as.data.frame(foo)
foo[[1]]->foo
summary(aov(lm(bp.Mbp ~ holo.or.mono)))[[1]][1,5]
#run phyloANOVA for bpMbp and centromere type
results <- matrix(NA, 100, 2)
colnames(results) <- c("wophylo","wphylo")
for(i in 1:100){
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
results[i, 1] <- summary(aov(lm(bp.Mbp ~ holo.or.mono)))[[1]][1,5]
results[i, 2] <- summary(aovphylo.bpMbp)$coefficients[2,4]
}
View(results)
View(results)
i<-1
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
summary(aovphylo.bpMbp)$coefficients[2,4]
i<-2\
i<-2
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
summary(aovphylo.bpMbp)$coefficients[2,4]
summary(aovphylo.bpMbp)$coefficients
aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
summary(aovphylo.bpMbp)$coefficients
foo <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[1]],
nsim = 100)
bar <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[2]],
nsim = 100)
bar$coefficients
foo$coefficients
View(results)
summary(aovphylo.bpMbp)$coefficients[2,4]
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
summary(aovphylo.bpMbp)
i<-1
aovphylo.bpMbp <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
aovphylo.bpMbp
i
i<-2
summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
tree1 <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[1]],
nsim = 100))
tree2 <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[2]],
nsim = 100))
tree1==tree2
tree1$coefficients==tree2$coefficients
tree1 <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[1]],
nsim = 100))
tree2 <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[2]],
nsim = 100))
View(results)
ummary(aov(lm(bp.Mbp ~ holo.or.mono)))[[1]][1,5:6]
summary(aov(lm(bp.Mbp ~ holo.or.mono)))[[1]][1,5:6]
aovphylo.bpMbp <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
aovphylo.bpMbp$coefficients
fit <- summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
fit$coefficients
fit
summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
fit$fstatistic
fit[[1]]
fit[[2]]
fit[[3]]
fit[[4]]
fit[[5]]
fit[[6]]
fit[[7]]
fit[[8]]
fit[[9]]
fit[[10]]
fit[[11]]
fit
summary(aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100))
fit <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
fit$coefficients
fit[2]
fit[3]
fit[4]
fit[5]
fit[6]
fit[7]
fit[8]
fit[9]
fit[10]
fit[11]
fit[12]
fit[13]
fit[14]
fit
aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
help("aov.phylo")
fit <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
print(attributes(fit)$summary)
attributes(fit)$summary->foo
foo$`Pr(>F)`
foo$`Pr(>F) given phy`
foo$`Pr(>F) given phy`[1]
results <- matrix(NA, 100, 2)
colnames(results) <- c("wophylo","wphylo")
for(i in 1:100){
fit <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = trees[[i]],
nsim = 100)
aov.sum <- attributes(fit)$summary
results[i, 1] <- aov.sum$`Pr(>F)`[1]
results[i, 2] <- aov.sum$`Pr(>F) given phy`[1]
}
View(results)
hist(results[,2]-results[,1])
range(results[,2]-results[,1])
which(results[,2]-results[,1])<0)
which((results[,2]-results[,1])<0)
write.csv(results,file="../results/cent.vs.cont.csv",row.names = F)
# read in the results
dat <- read.csv("../results/cent.vs.rate.csv")
setwd("~/Desktop/Dropbox/gitrepos/microsat/figures")
# read in the results
dat <- read.csv("../results/cent.vs.rate.csv")
dat$diff <- dat$rate.mon-dat$rate.hol
plot(density(dat$diff), xlim=c(-.1,.3),
cex.lab=.75,main="",
xlab=expression(paste(sigma^2, " difference (monocentric-holocentric)")))
polygon(density(dat$diff),col=rgb(250,159,181, maxColorValue = 255))
abline(v=0, lty=2,col="gray")
# read in microsatellite and centromere data
microsat.cent <- read.csv("data/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
View(microsat.cent)
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue',
bg = "bisque")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue')
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue')
# plot for presentation
par(mfcol=1,2)
# plot for presentation
par(mfcol=c(1,2))
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue')
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue',
bg="bisque")
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 21,
col = 'blue',
bg="bisque")
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = 'blue')
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250,159,181,.7, maxColorValue = 255))
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250,159,181,maxColorValue = 255))
help("rgb")
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250,159,181,alpha=.7,maxColorValue = 255))
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250,159,181,alpha=.17,maxColorValue = 255))
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250, 159, 181, 200,
maxColorValue = 255))
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#read in vertebrate data
mydata <-read.csv("../data/vert.data.csv", check.names = F)
#read in vertebrate data
mydata <-read.csv("../data/verts/vert.csv")
View(mydata)
#only keep the columns needed
dat <- mydata[,c(1:2,4:6,8,12:23)]
#read in vertebrate data
dat <-read.csv("../data/verts/vert.csv")
#only keep the columns needed
dat <- mydata[,c(1:2,4:6,8,12:23)]
#read in vertebrate data
dat <-read.csv("../data/verts/vert.csv")
#only keep the columns needed
dat <- dat[,c(1:2,4:6,8,12:23)]
#only keep the data that has all information
datcomp <- dat[complete.cases(dat),]
#read in vertebrate data
dat <-read.csv("../data/verts/vert.csv")
#only keep the columns needed
dat <- dat[,c(1:2,4:6,8,12:23)]
#only keep the data that has all information
dat <- dat[complete.cases(dat),]
#plot the total microsatellite content to the genome size
plot(dat$`Genome Size`, dat$`2-6mer`,
xlab = "Genome Size in Gbp",
ylab = "Total 2-6mer Content in bp",
col = "maroon")
#plot the total microsatellite content to the genome size
plot(dat$Genome.Size, dat$All.2.6mer..loci.per.Mbp.,
xlab = "Genome Size in Gbp",
ylab = "Total 2-6mer Content in bp",
col = "maroon")
fit <- lm(dat$Genome.Size ~ dat$All.2.6mer..loci.per.Mbp.)
summary(fit)
View(dat)
colnames(dat)[18]<-"2.6mermb"
summary(lm(dat$Genome.Size ~ dat$`2.6mermb`))
summary(lm(dat$Contig.N50  ~ dat$`2.6mermb`))
summary(lm(dat$Scaffold.N50 ~ dat$`2.6mermb`))
# read in the results
dat <- read.csv("../results/cent.vs.rate.csv")
dat$diff <- dat$rate.mon-dat$rate.hol
plot(density(dat$diff), xlim=c(-.1,.3),
cex.lab=.75,main="",
xlab=expression(paste(sigma^2, " difference (monocentric-holocentric)")))
polygon(density(dat$diff),col=rgb(250,159,181, maxColorValue = 255))
abline(v=0, lty=2,col="gray")
#export pdf at 4.3" x 4.3"
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../data/tree/tree.nex")
#load in the trees
trees <- read.nexus("../data/tree/post.nex")
#load in the trees
trees <- read.nexus("../data/trees/post.nex")
#select a single tree to use
tree <- trees[[sample(1:100, 1)]]
#load in the data
dat.microsat <- read.csv("results/micRocounter_results_TII.csv")
#load in the data
dat.microsat <- read.csv("../results/ssr.inference/micRocounter_results_TII.csv")
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../data/trees/post.nex")
#select a single tree to use
tree <- trees[[sample(1:100, 1)]]
rm(trees)
#load in the data
dat.microsat <- read.csv("../results/ssr.inference/micRocounter_results_TII.csv")
# drops the tip for B.terrestis
pruned.tree <- drop.tip(phy=tree, tip=c("B.terrestris",
"Plutella_xylostella"))
phylo.heatmap(pruned.tree, fsize = c(0.10, 0.5, 1), log(dat.microsat[5:10]), hcl.colors(n= 500, palette= "viridis"))
View(dat.microsat)
phylo.heatmap(pruned.tree, fsize = c(0.10, 0.5, 1), log(dat.microsat[,5:10]), hcl.colors(n= 500, palette= "viridis"))
foo <- log(dat.microsat[,5:10])
range(foo)
help("phylo.heatmap")
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = log(dat.microsat[,5:10]),
colors = hcl.colors(n= 500, palette= "viridis"))
foo <- dat.microsat[,5:10]
View(foo)
View(pruned.tree)
View(dat.microsat)
#load in the data
dat.microsat <- read.csv("../results/ssr.inference/micRocounter_results_TII.csv",
row.names = 4)
foo <- dat.microsat[,5:10]
View(foo)
pruned.tree$tip.label
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = log(dat.microsat[,5:10]),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = log(dat.microsat[,4:9]),
colors = hcl.colors(n= 500, palette= "viridis"))
View(dat.microsat)
colnames(dat.microsat)
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = dat.microsat[,11:16],
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = log(dat.microsat[,11:16]),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, 1),
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
exp(-3.38)
min(dat.microsat[,11:16]*1000)
phylo.heatmap(tree = pruned.tree,
fsize = c(0.10, 0.5, .1),
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(0, 0, .1),
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .1),
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31),
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000),
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000), labels=F,
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000), labels=F,pts=F,
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000), labels=F,
colors = hcl.colors(n= 500, palette= "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000),
labels = F, pts = F,
colors = hcl.colors(n = 500, palette = "viridis"))
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,4:9]*1000),
labels = F, pts = F,
colors = hcl.colors(n = 500, palette = "viridis"))
