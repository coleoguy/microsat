}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
View(rates)
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../data/traits/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom$rates.evol[[i]] <- rates.species[[hit]]
}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
rates$Average
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/tip.rates")
#load in necessary packages
library(phytools)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=dat.mic)[[1]]
}
rm(trees, i)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
rm(dat.mic)
for(k in 1:100){
print(k)
# estimate ancestral states
foo <- ace(x=bpMbp, phy=trees.pruned[[k]], model="BM")
# get tip branches
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[k]]$edge)){
val <- trees.pruned[[k]]$edge[i, 2]
if(!val %in% trees.pruned[[k]]$edge[, 1]){
tip.branch <- c(tip.branch, i)
}
}
anc.state <- c()
for(j in 1:length(tip.branch)){
# get node microsatellite estimate
trees.pruned[[k]]$edge.length[tip.branch]
wanted.node <- trees.pruned[[k]]$edge[tip.branch[j], 1]
anc.state[j] <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
}
curr.state <- c()
for(j in 1:length(tip.branch)){
curr.sp <- trees.pruned[[k]]$tip.label[j]
curr.state <- bpMbp[names(bpMbp) == curr.sp]
}
print(anc.state - curr.state)
tip.rates <- (anc.state - curr.state) /
trees.pruned[[k]]$edge.length[tip.branch]
names(tip.rates) <- trees.pruned[[k]]$tip.label
if(k == 1){
tipp.rates <- tip.rates
}else{
tipp.rates <- cbind(tipp.rates, tip.rates)
}
}
colnames(tipp.rates) <- paste("tree", 1:100)
tipp.rates[,] <- abs(tipp.rates)
Average <- rowSums(tipp.rates)/100
tipp.rates <- rbind(tipp.rates. Average)
tipp.rates <- rbind(tipp.rates, Average)
Average
rowSums(tipp.rates)/100
View(tipp.rates)
View(tipp.rates)
tipp.rates[-202,]
tipp.rates <- tipp.rates[-202,]
tipp.rates <- cbind(tipp.rates, Average)
write.csv(tipp.rates, file="tip.rates.csv")
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
setwd("~/Desktop/Dropbox/gitrepos/microsat/figures")
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../data/traits/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
View(dat.rates.chrom)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
View(dat.rates.chrom)
rates.species
i <- 1
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
row.names(dat.rates.chrom)[i] %in% names(rates.species)
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
View(rates)
View(dat.rates.chrom)
rates.species[hit]
row.names(rates)[hit]
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom[i,4:104] <- rates.species[hit]
View(dat.rates.chrom)
View(rates)
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../data/traits/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom[i,4:104] <- rates[hit, 1:100]
}
}
View(dat.rates.chrom)
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
i <- 1
summary(phylolm(as.numeric(dat.rates.chrom[,(i+3)]) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
summary(phylolm(as.numeric(dat.rates.chrom[,(i+3)]) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../data/traits/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom[i,4:104] <- rates[hit, 1:100]
}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(dat.rates.chrom[,(i+3)]) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
warnings()
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#plot the microsatellite content in bp/Mbp and the diploid chromosome number
plot(dat.rates.chrom$rates.evol~dat.rates.chrom$diploid.num,
xlab = "Diploid Chromosome Number",
ylab = "Microsatellite Evolution Rates",
pch = 16,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
#set figrues as working directory
#load in libraries
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#read in nmicrosatellite data
str <- read.csv("../data/traits/micro.vs.chrom.csv")
str <- str[,1:3]
str$rates <- NA
str$species <- gsub(pattern = " ", replacement = "_", str$species)
#fix the names in the data that are different from the trees
str$species <- sub(pattern = "Harpergnathos_saltator",
replacement = "Harpegnathos_saltator", str$species)
str$species <- gsub(pattern = "helicoverpa_zea",
replacement = "Helicoverpa_zea", str$species)
str$species <- gsub(pattern = "papilio_polytes",
replacement = "Papilio_polytes", str$species)
str$species <- gsub(pattern = "Pogomyrmex_barbatus",
replacement = "Pogonomyrmex_barbatus", str$species)
str$species <- gsub(pattern = "Scaptodrosophila_lebanonesis",
replacement = "Scaptodrosophila_lebanonensis", str$species)
#assign rownames
row.names(str) <- str$species
View(str)
View(rates)
#assign rownames
row.names(str) <- str$species
i <- 1
hit <- which(names(rates.species) == str$species[i])[1]
#fill in rates for those species that have a match in species column
str[i, 4:104] <- rates[hit, 1:100]
View(str)
#assign rownames
row.names(str) <- str$species
#fill in the rates into the other data frame
for(i in 1:nrow(str)){
hit <- which(names(rates.species) == str$species[i])[1]
#fill in rates for those species that have a match in species column
str[i, 4:104] <- rates[hit, 1:100]
}
View(str)
#clean environment
rm(list = c("rates", "hit", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
pvals.rates <- beta.rates <- c()
str$gsz <- str$gsz/1000000
i <- 1
print(i)
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=str)
#stores current trees data
tree.cur <- foo[[1]]
#stores p-value on phylolm analysis
cur.results <- summary(phylolm(str[,(i+3)] ~ gsz,
data = str,
phy = tree.cur,
model = "BM",
boot = 100))
summary(phylolm(str[,(i+3)] ~ gsz,
data = str,
phy = tree.cur,
model = "BM",
boot = 100))
#set figrues as working directory
#load in libraries
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#read in nmicrosatellite data
str <- read.csv("../data/traits/micro.vs.chrom.csv")
str <- str[,1:3]
str$rates <- NA
str$species <- gsub(pattern = " ", replacement = "_", str$species)
#fix the names in the data that are different from the trees
str$species <- sub(pattern = "Harpergnathos_saltator",
replacement = "Harpegnathos_saltator", str$species)
str$species <- gsub(pattern = "helicoverpa_zea",
replacement = "Helicoverpa_zea", str$species)
str$species <- gsub(pattern = "papilio_polytes",
replacement = "Papilio_polytes", str$species)
str$species <- gsub(pattern = "Pogomyrmex_barbatus",
replacement = "Pogonomyrmex_barbatus", str$species)
str$species <- gsub(pattern = "Scaptodrosophila_lebanonesis",
replacement = "Scaptodrosophila_lebanonensis", str$species)
#assign rownames
row.names(str) <- str$species
#fill in the rates into the other data frame
for(i in 1:nrow(str)){
hit <- which(names(rates.species) == str$species[i])[1]
#fill in rates for those species that have a match in species column
str[i, 4:104] <- rates[hit, 1:100]
}
#clean environment
rm(list = c("rates", "hit", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
pvals.rates <- beta.rates <- c()
str$gsz <- str$gsz/1000000
for(i in 1:100){
print(i)
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=str)
#stores current trees data
tree.cur <- foo[[1]]
#stores p-value on phylolm analysis
cur.results <- summary(phylolm(str[,(i+3)] ~ gsz,
data = str,
phy = tree.cur,
model = "BM",
boot = 100))
pvals.rates[i] <- cur.results$coefficients[2,6]
beta.rates[i] <- cur.results$coefficients[2,1]
}
#make the results into a data frame
results <- data.frame(pvals.rates,beta.rates)
View(results)
#write the results to a csv
write.csv(pvals.rates, "../results/genome.size/gsz.rates.csv")
View(str)
# rates <- abs(str$rates)
#plot the microsatellite evolution rates and genome size
plot(rowSums(str[,4:104]) ~ str$gsz,
xlab = "Genome Size (Mbp)",
ylab = "Microsatellite Evolution Rates",
pch = 16,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
# rates <- abs(str$rates)
#plot the microsatellite evolution rates and genome size
plot(rowSums(str[,4:104]) ~ str$gsz,
xlab = "Genome Size (Mbp)",
ylab = "Microsatellite Evolution Rates",
pch = 16,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
