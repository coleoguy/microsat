#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100)
phylolm(rates.evol ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100)
View(dat)
tree.test$tip.label
row.names(dat.rates.chrom)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom$rates.evol[[i]] <- rates.species[[hit]]
}
}
row.names(dat.rates.chrom)
rownames(dat.rates.chrom) <- dat.rates.chrom$species
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
View(dat.intersect)
#load in packages needed
library(phytools)
library(geiger)
library(phylolm)
#read in nmicrosatellite data
str <- read.csv("../data/traits/micro.vs.chrom.csv")
#read in chromosome data
chrom <- read.csv("../data/traits/data.invert.csv")
#vector of names from chromosome data
chrom.names <- paste(chrom$Genus, chrom$species)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(str)){
# if species in microcounter matches one in chromosome data
if(str$species[i] %in% chrom.names){
#store the name in vector hit
hit <- which(chrom.names == str$species[i])[1]
#fill in diploid number for those species that have a match in the
#chromosome data
str$diploid.num[i] <- chrom$Chromosome.number..female..2N[hit]
}
}
#make a new data frame that will contain only those species with both
#microsatellite and chromosome number data
dat.intersect <- str[complete.cases(str),]
#write the CSV with microsatellite, genome, and diploid chromosome number data
write.csv(dat.intersect, "dat.intersect.csv")
#then reread in the data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.chrom <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.intersect)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.chrom[i] <- summary(phylolm((all/gsz) ~ diploid.num,
data = dat.intersect,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.chrom,
main = "Chromosome Number and Microsatellites P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col=rgb(250, 159, 181, 100,
maxColorValue = 255))
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom$rates.evol[[i]] <- rates.species[[hit]]
}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.chrom <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.intersect)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.chrom[i] <- summary(phylolm((all/gsz) ~ diploid.num,
data = dat.intersect,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.chrom,
main = "Chromosome Number and Microsatellites P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col=rgb(250, 159, 181, 100,
maxColorValue = 255))
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../figures/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom$rates.evol[[i]] <- rates.species[[hit]]
}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/trees/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(rates.evol) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#makes a histogram containing the p-values from the loop
hist(pvals.rates,
main = "Chromosome Number and Rate P-Values",
xlab = "P-Values",
ylab = "Frequency of P-Values",
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
library(geiger)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
holo.or.mono <- microsat.cent$holo.or.mono
names(holo.or.mono) <- row.names(microsat.cent)
#make named vector for 2mer content
bp.2 <- microsat.cent$twomers
names(bp.2) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp2 <- aov.phylo(bp.2 ~ holo.or.mono,
phy = tree,
nsim = 100)
#import trees
tree <- read.nexus("../data/trees/post.nex")
#make named vector for 2mer content
bp.2 <- microsat.cent$twomers
names(bp.2) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp2 <- aov.phylo(bp.2 ~ holo.or.mono,
phy = tree,
nsim = 100)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
library(geiger)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# plot for presentation
boxplot(log(bp.all) ~ holo.or.mono,
data = microsat.cent,
outpch = NA,
xlab = "Type of Centromere",
ylab = "log Microsatellite Content (bp)")
stripchart(log(microsat.cent$all) ~ microsat.cent$holo.or.mono,
vertical = TRUE,
data = microsat.cent,
method = "jitter",
add = TRUE,
pch = 20,
col = rgb(250, 159, 181, 100,
maxColorValue = 255))
holo.or.mono <- microsat.cent$holo.or.mono
names(holo.or.mono) <- row.names(microsat.cent)
#import trees
tree <- read.nexus("../data/trees/post.nex")
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(microsat.cent$bp.Mbp ~ microsat.cent$holo.or.mono,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
holo.or.mono <- microsat.cent$holo.or.mono
names(holo.or.mono) <- row.names(microsat.cent)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
names(bp.Mbp)
names(holo.or.mono)
names(bp.Mbp) == names(holo.or.mono)
aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(holo.or.mono ~ bp.Mbp,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.all ~ holo.or.mono,
phy = tree,
nsim = 100)
library(geiger)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/ssr.inference/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
#read in centromere type data
holo.or.mono <- microsat.cent$holo.or.mono
names(holo.or.mono) <- row.names(microsat.cent)
#import trees
trees <- read.nexus("../data/trees/post.nex")
tree <- trees[[sample(1:100, 1)]]
rm(trees)
# drops the tip
pruned.tree <- drop.tip(phy=tree, tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# make named vector for all microsat content
bp.all <- microsat.cent$all
names(bp.all) <- row.names(microsat.cent)
# run aovphylo with phylogenetic correction
aovphylo.bp2 <- aov.phylo(bp.all ~ holo.or.mono,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bp.Mbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bpMbp <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = tree,
nsim = 100)
# run aovphylo with phylogenetic correction
aovphylo.bpall <- aov.phylo(bp.all ~ holo.or.mono,
phy = tree,
nsim = 100)
#make named vector for 2mer content
bp.2 <- microsat.cent$twomers
names(bp.2) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp2 <- aov.phylo(bp.2 ~ holo.or.mono,
phy = tree,
nsim = 100)
#make named vector for 3mer content
bp.3 <- microsat.cent$threemers
names(bp.3) <- row.names(microsat.cent)
# run phyloANOVA for 3mers and centromere type
aovphylo.bp3 <- aov.phylo(bp.3 ~ holo.or.mono,
phy = tree,
nsim = 100)
# make named vector for 4mer content
bp.4 <- microsat.cent$fourmers
names(bp.4) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp4 <- aov.phylo(bp.4 ~ holo.or.mono,
phy = tree,
nsim = 100)
# make named vector for 5mer content
bp.5 <- microsat.cent$fivemers
names(bp.5) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp5 <- aov.phylo(bp.5 ~ holo.or.mono,
phy = tree,
nsim = 100)
# make named vector for 6mer content
bp.6 <- microsat.cent$sixmers
names(bp.6) <- row.names(microsat.cent)
# run phyloANOVA for 2mers and centromere type
aovphylo.bp2 <- aov.phylo(bp.6 ~ holo.or.mono,
phy = tree,
nsim = 100)
