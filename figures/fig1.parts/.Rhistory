foo
for(j in 1:100){
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait)
#######
# current.map <-  anc.state.dt[[j]]
# #### Parse simmap to get producing nodes ####
# # the mapped edge object has time spent in a state in
# # two columns so only branches with a change have an entry
# # in both columns
# #######
# # gets branches with transitions
# ss_nodes <- current.map$mapped.edge[, 1] > 0 &
#   current.map$mapped.edge[, 2] > 0
#
# # this returns the node pairs describing a branch with transitions
# wanted_branches <- ss_nodes[ss_nodes == T]
# wanted_nodes <- names(wanted_branches)
#
#
# if(sum(mat) > 1){
#   # for the general model we partition the producing nodes for 1->2 and 1<-2 transitions
#   producing.nodes12 <- c()
#   producing.nodes21 <-c()
#   trans.maps <- current.map$maps[ss_nodes == T]
#   # now we take the rootward node of each branch and get rid of duplicates
#   wanted_nodes <- gsub(",.*", "", wanted_nodes)
#   ##### Just realized we can do this with describe.simmap :(
#   ##### But i dont want to change it, it would require match function
#   for(i in 1:length(wanted_nodes)){
#     if(names(trans.maps[[i]])[1] == '1'){
#       producing.nodes12 <- c(producing.nodes12, wanted_nodes[i])
#     }else if(names(trans.maps[[i]])[1] == '2'){
#       producing.nodes21 <- c(producing.nodes21, wanted_nodes[i])
#     }
#   }
#
#   producing.nodes12 <- unique(producing.nodes12)
#   producing.nodes21 <- unique(producing.nodes21)
#
#
#   ##### get estimated ancestral conditions ######
#   observed.anc.cond[[j]] <- list('12' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes12],
#                                  '21' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes21])
########
}
observed.anc.cond[[4]]
observed.anc.cond[[7]]
observed.anc.cond[[9]]
observed.anc.cond[[23]]
anc.states.dt
##### Creating Testing Data #####
library(phytools)
library(geiger)
library(diversitree)
tree <- trees(pars = c(3,1),
type = "bd",
n = 1,
max.taxa = 100,
include.extinct = F)[[1]]
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# we then simulate the continious character
cont.trait <- sim.char(tree, 0.2, model = 'BM')[,,1]
# identifying which branch had a mean cont trait value in the upper and lower quartiles
# we do this by 1st doing an ASR for the continious trait
cont.trait.AC <- anc.ML(tree, cont.trait, model = "BM")
# this will hold all of the branch means in the same order they are given in tree
branch.means <- c()
# branch names is essentially paste(rootward node, tipward node)
branch.names <- c()
# then for each branch we go through and calculate the name and mean
for(j in 1:nrow(tree$edge)){
# we first find the cont trait value at the rootward node
node.o.int <- tree$edge[j,1]
# we have to look in two different places for cont trait values, either in the cont.trait vector
# (if the node is a tip) or in the ASR if it is an interior node
if(node.o.int <= 100){
one <- cont.trait[node.o.int]
}else{
one <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# we do the same for the tipward node
node.o.int <- tree$edge[j,2]
if(node.o.int <= 100){
two <- cont.trait[node.o.int]
}else{
two <- cont.trait.AC$ace[names(cont.trait.AC$ace) == as.character(node.o.int)]
}
# to find the mean we avg the rootward and the tipward cont trait values
branch.means <- c(branch.means, mean(one, two))
# we create branch names by pasting the rootwward and tipward node labels together
branch.names <- c(branch.names, paste(as.character(tree$edge[j,1]),as.character(tree$edge[j,2])))
}
# we name the branch names for nice bookkeeping
names(branch.means) <- branch.names
# finding upper and lower quartiles
upper <- summary(branch.means)[[5]]
lower <- summary(branch.means)[[2]]
scale.factor <- 5
# we leave the original tree un altered
alt.tree <- tree
# we then manipulate the branch lengths of those branches whose cont trait means are in the upper or lower quartiles
for(j in 1:length(branch.means)){
if(branch.means[j] < lower){alt.tree$edge.length[j] <- alt.tree$edge.length[j] / scale.factor}
if(branch.means[j] > upper){alt.tree$edge.length[j] <- alt.tree$edge.length[j] * scale.factor}
}
# next we simulated a discrete trait on this altered tree
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
rate <- .3
while(good.sim == F){
disc.trait <- sim.char(phy = alt.tree,
par = matrix(c(-rate, rate, rate, -rate), 2),
model = 'discrete',
root = sample(c(1,2),1))
if((0.05 * 100) < sum(disc.trait == min(disc.trait)) &&
sum(disc.trait == min(disc.trait)) < (.95 * 100)){
good.sim <- T
}
}
# we now apply the AncCond test to our simulated data and record its result
data <- data.frame(alt.tree$tip.label, cont.trait, disc.trait)
mc <- 1000
drop.state <- NULL
mat <- c(0,2,1,0)
pi <- 'estimated'
n.tails <- 1
message <- T
rm(list=ls()[-c(21,6,13,8,12,18,15,14)])
##### testing inputs #####
if(class(tree) != 'phylo') {stop('tree must be class phylo')}
if(!is.data.frame(data) & ncol(data) == 3){stop('data should be a dataframe with 3 columns\n(tip labels, cont data, discrete data)')}
if(class(mc) != 'numeric' | round(mc) != mc | mc < 1){stop('mc should be a numeric positive integer integer')}
if(!is.null(drop.state)) if(!drop.state %in% c(1,2)){stop('drop.state must be NULL, or numeric 1 or 2')}
if(!sum(mat == c(0,0,1,0)) == 4 & !sum(mat == c(0,1,1,0)) == 4 & !sum(mat == c(0,2,1,0)) == 4){
stop('mat must be a vector of the form c(0,0,1,0), c(0,1,1,0), or c(0,2,1,0)')
}
if((!pi %in% c('equal', 'estimated'))[1]){
if(!is.numeric(pi)) stop('pi must be equal, estimated or a vector of length 2\nwith probabilities for the state of the discrete character at the root')
if(length(pi) != 2 | sum(pi) != 1) stop('pi must be equal, estimated or a vector of length 2\nwith probabilities for the state of the discrete character at the root')
}
if(n.tails != 1 & n.tails != 2){stop('n.tails should be numeric 1 or 2')}
##### create named vector for disc trait for all taxa #####
dt.vec <- data[, 3]
names(dt.vec) <- data[, 1]
##### create named vector for cont trait taxa not in derived state #####
if(!is.null(drop.state)){
ct.data <- data[(data[, 3] != drop.state),]
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}else{
ct.data <- data
ct.vec <- as.numeric(ct.data[, 2])
names(ct.vec) <- ct.data[, 1]
}
if(sum(is.na(ct.vec)) > 0 | sum(is.na(dt.vec)) > 0){
stop('There exists missing trait data for some species in the phylogeny.\n
Please remove such taxa from the tree.')
}
#### ASR for the continuous trait  ####
anc.states.cont.trait <- anc.ML(tree, ct.vec, model = "BM")
anc.state.dt <- make.simmap(tree, dt.vec,
model = matrix(mat,2),
nsim = 100,
pi = pi,
Q = 'mcmc',
message = T)
observed.anc.cond <- list()
null.anc.cond <- list()
observed.anc.cond <- list()
null.anc.cond <- list()
for(j in 1:100){
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait)
#######
# current.map <-  anc.state.dt[[j]]
# #### Parse simmap to get producing nodes ####
# # the mapped edge object has time spent in a state in
# # two columns so only branches with a change have an entry
# # in both columns
# #######
# # gets branches with transitions
# ss_nodes <- current.map$mapped.edge[, 1] > 0 &
#   current.map$mapped.edge[, 2] > 0
#
# # this returns the node pairs describing a branch with transitions
# wanted_branches <- ss_nodes[ss_nodes == T]
# wanted_nodes <- names(wanted_branches)
#
#
# if(sum(mat) > 1){
#   # for the general model we partition the producing nodes for 1->2 and 1<-2 transitions
#   producing.nodes12 <- c()
#   producing.nodes21 <-c()
#   trans.maps <- current.map$maps[ss_nodes == T]
#   # now we take the rootward node of each branch and get rid of duplicates
#   wanted_nodes <- gsub(",.*", "", wanted_nodes)
#   ##### Just realized we can do this with describe.simmap :(
#   ##### But i dont want to change it, it would require match function
#   for(i in 1:length(wanted_nodes)){
#     if(names(trans.maps[[i]])[1] == '1'){
#       producing.nodes12 <- c(producing.nodes12, wanted_nodes[i])
#     }else if(names(trans.maps[[i]])[1] == '2'){
#       producing.nodes21 <- c(producing.nodes21, wanted_nodes[i])
#     }
#   }
#
#   producing.nodes12 <- unique(producing.nodes12)
#   producing.nodes21 <- unique(producing.nodes21)
#
#
#   ##### get estimated ancestral conditions ######
#   observed.anc.cond[[j]] <- list('12' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes12],
#                                  '21' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes21])
########
}
# this takes a stochastic map and continuous trait
exctractAncestral <- function(current.map, anc.states.cont.trait){
#### Parse simmap to get producing nodes ####
# the mapped edge object has time spent in a state in
# two columns so only branches with a change have an entry
# in both columns
#######
# gets branches with transitions
ss_nodes <- current.map$mapped.edge[, 1] > 0 &
current.map$mapped.edge[, 2] > 0
# this returns the node pairs describing a branch with transitions
wanted_branches <- ss_nodes[ss_nodes == T]
wanted_nodes <- names(wanted_branches)
# for the general model we partition the producing nodes for 1->2 and 1<-2 transitions
producing.nodes12 <- c()
producing.nodes21 <-c()
trans.maps <- current.map$maps[ss_nodes == T]
# now we take the rootward node of each branch and get rid of duplicates
wanted_nodes <- gsub(",.*", "", wanted_nodes)
##### Just realized we can do this with describe.simmap :(
##### But i dont want to change it, it would require match function
for(i in 1:length(wanted_nodes)){
if(names(trans.maps[[i]])[1] == '1'){
producing.nodes12 <- c(producing.nodes12, wanted_nodes[i])
}else if(names(trans.maps[[i]])[1] == '2'){
producing.nodes21 <- c(producing.nodes21, wanted_nodes[i])
}
}
producing.nodes12 <- unique(producing.nodes12)
producing.nodes21 <- unique(producing.nodes21)
##### get estimated ancestral conditions ######
observed.anc.cond <- list('12' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
producing.nodes12],
'21' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
producing.nodes21])
return(observed.anc.cond)
}
for(j in 1:100){
observed.anc.cond[[j]] <- exctractAncestral(current.map = anc.state.dt[[j]],
anc.states.cont.trait)
#######
# current.map <-  anc.state.dt[[j]]
# #### Parse simmap to get producing nodes ####
# # the mapped edge object has time spent in a state in
# # two columns so only branches with a change have an entry
# # in both columns
# #######
# # gets branches with transitions
# ss_nodes <- current.map$mapped.edge[, 1] > 0 &
#   current.map$mapped.edge[, 2] > 0
#
# # this returns the node pairs describing a branch with transitions
# wanted_branches <- ss_nodes[ss_nodes == T]
# wanted_nodes <- names(wanted_branches)
#
#
# if(sum(mat) > 1){
#   # for the general model we partition the producing nodes for 1->2 and 1<-2 transitions
#   producing.nodes12 <- c()
#   producing.nodes21 <-c()
#   trans.maps <- current.map$maps[ss_nodes == T]
#   # now we take the rootward node of each branch and get rid of duplicates
#   wanted_nodes <- gsub(",.*", "", wanted_nodes)
#   ##### Just realized we can do this with describe.simmap :(
#   ##### But i dont want to change it, it would require match function
#   for(i in 1:length(wanted_nodes)){
#     if(names(trans.maps[[i]])[1] == '1'){
#       producing.nodes12 <- c(producing.nodes12, wanted_nodes[i])
#     }else if(names(trans.maps[[i]])[1] == '2'){
#       producing.nodes21 <- c(producing.nodes21, wanted_nodes[i])
#     }
#   }
#
#   producing.nodes12 <- unique(producing.nodes12)
#   producing.nodes21 <- unique(producing.nodes21)
#
#
#   ##### get estimated ancestral conditions ######
#   observed.anc.cond[[j]] <- list('12' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes12],
#                                  '21' = anc.states.cont.trait$ace[names(anc.states.cont.trait$ace) %in%
#                                                                     producing.nodes21])
########
}
iter = 10
j <- 1
current.map = anc.state.dt[[j]]
# if(sum(mat) > 1){
nulldist <- matrix(NA,iter,2)
colnames(nulldist) <- c('12','21')
n <- 1
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
null.disc.trait <- sim.char(phy = tree,
par = anc.state.dt$Q,
model = 'discrete',
root = sample(c(1,2),1))
anc.state.dt$Q
current.map$Q
null.disc.trait <- sim.char(phy = tree,
par = current.map$Q,
model = 'discrete',
root = sample(c(1,2),1))
null.disc.trait <- sim.char(phy = tree,
par = current.map$Q,
model = 'discrete',
root = sample(c(1,2),1))[,,1]
null.disc.trait
unique(null.disc.trait)
length(unique(null.disc.trait))>1
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
null.disc.trait <- sim.char(phy = tree,
par = current.map$Q,
model = 'discrete',
root = sample(c(1,2),1))[,,1]
if(length(unique(null.disc.trait))>1) good.sim <- T
}
rownames(null.disc.trait)
names(null.disc.trait)
help(make.simmap)
# nullnames <- names(null.disc.trait)
# null.disc.trait <- as.factor(null.disc.trait)
# names(null.disc.trait) <- nullnames
sim.anc.state.dt <- make.simmap(tree, null.disc.trait,
model = current.map$Q,
nsim = 1,
pi = pi,
message = F)
current.map$Q
# nullnames <- names(null.disc.trait)
# null.disc.trait <- as.factor(null.disc.trait)
# names(null.disc.trait) <- nullnames
sim.anc.state.dt <- make.simmap(tree, null.disc.trait,
Q = current.map$Q,
nsim = 1,
pi = pi,
message = F)
# nullnames <- names(null.disc.trait)
# null.disc.trait <- as.factor(null.disc.trait)
# names(null.disc.trait) <- nullnames
sim.anc.state.dt <- make.simmap(tree, null.disc.trait,
Q = current.map$Q,
nsim = 1,
pi = pi,
message = F)
plot(sim.anc.state.dt)
# if(sum(mat) > 1){
nulldist <- list()
n <- 1
nulldist[[n]] <- exctractAncestral(current.map = sim.anc.state.dt,
anc.states.cont.trait = anc.states.cont.trait)
nulldist[[1]]
# }else{
#   nulldist <- vector(length = iter)
# }
for(n in 1:iter){
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
null.disc.trait <- sim.char(phy = tree,
par = current.map$Q,
model = 'discrete',
root = sample(c(1,2),1))[,,1]
if(length(unique(null.disc.trait))>1) good.sim <- T
}
# nullnames <- names(null.disc.trait)
# null.disc.trait <- as.factor(null.disc.trait)
# names(null.disc.trait) <- nullnames
sim.anc.state.dt <- make.simmap(tree, null.disc.trait,
Q = current.map$Q,
nsim = 1,
pi = pi,
message = F)
nulldist[[n]] <- exctractAncestral(current.map = sim.anc.state.dt,
anc.states.cont.trait = anc.states.cont.trait)
}
CreateNull <- function(tree,                     # a tree type phylo
iter,                     # number of simulations for null
current.map,             # for Q-matrix
anc.states.cont.trait){   # ancestral state reconstruction for continuous
# if(sum(mat) > 1){
nulldist <- list()
# }else{
#   nulldist <- vector(length = iter)
# }
for(n in 1:iter){
# while loop is set up to make sure sufficient transitions occur on the tree
good.sim <- F
while(good.sim == F){
null.disc.trait <- sim.char(phy = tree,
par = current.map$Q,
model = 'discrete',
root = sample(c(1,2),1))[,,1]
if(length(unique(null.disc.trait))>1) good.sim <- T
}
# nullnames <- names(null.disc.trait)
# null.disc.trait <- as.factor(null.disc.trait)
# names(null.disc.trait) <- nullnames
sim.anc.state.dt <- make.simmap(tree = tree,
null.disc.trait,
Q = current.map$Q,
nsim = 1,
pi = pi,
message = F)
nulldist[[n]] <- exctractAncestral(current.map = sim.anc.state.dt,
anc.states.cont.trait = anc.states.cont.trait)
}
return(nulldist)
}
source('~/Desktop/Dropbox/projects/ancCond/analyses/functions.R')
source('~/Desktop/Dropbox/projects/ancCond/analyses/functions.R')
hist(density(rexp(n=1000, rate=.5)))
rexp(n=1000, rate=.5)
plot(density(rexp(n=1000, rate=.5)))
plot(density(rexp(n=10000, rate=.5)))
plot(density(rexp(n=100000, rate=.5)))
plot(density(rexp(n=100000, rate=.15)))
plot(density(rexp(n=100000, rate=1)))
plot(density(rexp(n=100000, rate=2)))
library(diversitree)
help("make.mkn")
library(readr)
all <- read_csv("Desktop/Dropbox/gitrepos/microsat/results/all.csv")
View(all)
library(readr)
micRocounter_results <- read_csv("Desktop/Dropbox/gitrepos/microsat/results/micRocounter_results.csv")
View(micRocounter_results)
micRocounter_results$fivemers
which.max(micRocounter_results$fivemers)
which.max(micRocounter_results$perc.all)
micRocounter_results$species[which.max(micRocounter_results$perc.all)]
setwd("~/Desktop/Dropbox/gitrepos/microsat/figures/fig1.parts")
#set working directory as figures/heatmap
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../../data/trees/post.nex")
setwd("~/Desktop/Dropbox/gitrepos/microsat/figures/fig1.parts")
#set working directory as figures/heatmap
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../../data/trees/post.nex")
#load in the trees
trees <- read.nexus("../../data/post.nex")
#select a single tree to use
tree <- trees[[sample(1:100, 1)]]
rm(trees)
#load in the data
dat.microsat <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
row.names = 4)
#load in the data
dat.microsat <- read.csv("../../results/micRocounter_results_TII.csv",
row.names = 4)
# drops the tip for B.terrestis
pruned.tree <- drop.tip(phy=tree, tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo <- dat.microsat
sp <- c()
for(i in 1:nrow(dat.microsat)){
hit <- which(row.names(dat.microsat)==pruned.tree$tip.label[i])
foo[i, ] <- dat.microsat[hit, ]
sp[i] <- row.names(dat.microsat)[hit]
}
row.names(foo) <- sp
#make the heatmap with phylogeny
phylo.heatmap(tree = pruned.tree,
fsize = c(.0001, .0001, .31), standardize=T,
X = log(dat.microsat[,11:16]*1000),
labels = F, pts = F,
colors = hcl.colors(n = 500, palette = "viridis"))
dat.microsat$genus
row.names(dat.microsat)[201]
View(dat.microsat)
max(dat.microsat$fivemers)
which.max(dat.microsat$fivemers)
row.names(dat.microsat)[which.max(dat.microsat$fivemers)]
#load in the data
dat.microsat <- read.csv("../../results/micRocounter_results_TII.csv",
row.names = 4)
row.names(dat.microsat)[which.max(dat.microsat$fivemers)]
library(readr)
micRocounter_results <- read_csv("~/Desktop/Dropbox/gitrepos/microsat/results/micRocounter_results.csv")
View(micRocounter_results)
plot(pruned.tree, cex=.5)
