# run aovphylo with phylogenetic correction
aovphylo.bpMbp <- pval.bpMbp <- c()
for(i in 1:100){
aovphylo.bpMbp[[i]] <- aov.phylo(bp.Mbp ~ holo.or.mono,
phy = pruned.tree[[i]],
nsim = 100)
pval.bpMbp[[i]] <- print(attributes(aovphylo.bpMbp[[i]])$summary)[1,6]
}
#set figures as working directory
#load in packages needed
library(phytools)
library(geiger)
library(phylolm)
#read in nmicrosatellite data
str <- read.csv("../data/micro.vs.chrom.csv")
#read in chromosome data
chrom <- read.csv("../data/data.invert.csv")
#vector of names from chromosome data
chrom.names <- paste(chrom$Genus, chrom$species)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(str)){
# if species in microcounter matches one in chromosome data
if(str$species[i] %in% chrom.names){
#store the name in vector hit
hit <- which(chrom.names == str$species[i])[1]
#fill in diploid number for those species that have a match in the
#chromosome data
str$diploid.num[i] <- chrom$Chromosome.number..female..2N[hit]
}
}
#make a new data frame that will contain only those species with both
#microsatellite and chromosome number data
dat.intersect <- str[complete.cases(str),]
#write the CSV with microsatellite, genome, and diploid chromosome number data
write.csv(dat.intersect, "dat.intersect.csv")
#read in trees
trees <- read.nexus("../data/post.nex")
#make a vector to store p-values
pvals.chrom <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.intersect)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.chrom[i] <- summary(phylolm((all/gsz) ~ diploid.num,
data = dat.intersect,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#set figures as working directory
#load in libraries
library(phytools)
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../analyses/tip.rates.csv",
row.names = 1)
#read in csv with rates of evolution
rates <- read.csv("../../analyses/tip.rates.csv",
row.names = 1)
#read in csv with rates of evolution
rates <- read.csv("../../results/tip.rates.csv",
row.names = 1)
#read in csv with rates of evolution
rates <- read.csv("../results/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#load in chromosomes number data
dat.intersect <- read.csv("../data/dat.intersect.csv",
as.is = T,
row.names = 1)
#make an empty column in the data frame with diploid chromosome number
dat.rates.chrom <- cbind(dat.intersect, rates.evol = "", stringsAsFactors = F)
#loop that finds species diploid chromosome number from our data frame
for(i in 1:nrow(dat.rates.chrom)){
# if species in microcounter matches one in chromosome data
if(row.names(dat.rates.chrom)[i] %in% names(rates.species)){
#store the name in vector hit
hit <- which(names(rates.species) == row.names(dat.rates.chrom)[i])
#fill in rates for those species that have a match in the
#chromosome data
dat.rates.chrom[i,4:104] <- rates[hit, 1:100]
}
}
#clean environment
rm(list = c("dat.intersect", "rates", "i", "rates.species"))
#read in trees
trees <- read.nexus("../data/post.nex")
#make a vector to store p-values
pvals.rates <- c()
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
for(i in 1:100){
print(i)
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=dat.rates.chrom)
#stores current trees data
tree.cur <- foo[[1]]
#creates data frame of the data for each tree
dat <- as.data.frame(foo[[2]])
#stores p-value on phylolm analysis
pvals.rates[i] <- summary(phylolm(as.numeric(dat.rates.chrom[,(i+3)]) ~ diploid.num,
data = dat.rates.chrom,
phy = tree.cur,
model = "BM",
boot = 100))$coefficients[2,6]
}
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../data/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../data/centromere.type.csv",
as.is = T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data = cent.type)[[1]]
}
rm(trees, i)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
# remove "Timema_cristinae" this species is not place
# in the tree correctly
foo <- list()
for(i in 1:100){
foo[[i]] <- drop.tip(trees.pruned[[i]], tip="Timema_cristinae")
}
trees.pruned <- foo
rm(foo)
# also remove this data from the data
cent.type <- cent.type[names(cent.type)!="Timema_cristinae"]
#make a vector to store the simmaps
histories <- list()
#loop through making simmaps for each of the 100 trees
for(i in 1:100){
print(paste("working on tree", i))
histories[[i]] <- make.simmap(trees.pruned[[i]],
cent.type,
model="ARD",
pi="estimated")
}
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#read in the microsatellite data
dat.mic <- read.csv("../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#read in the microsatellite data
dat.mic <- read.csv("../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#read in the microsatellite data
dat.mic <- read.csv("../results/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#read in microsatellite data
dat.mic <- read.csv("../data/micro.vs.chrom.csv", as.is=T)
#read in chromosome data
dat.chroms <- read.csv("../data/data.invert.csv", as.is=T)
#vector of names from chromosome data
chrom.names <- paste(dat.chroms$Genus, dat.chroms$species)
# load in geiger library for aovphylo
library(geiger)
# read in microsatellite and centromere data
microsat.cent <- read.csv("../results/micRocounter_results_TII_typecentromere.csv",
row.names = 4)
# read in sampled trees
trees <- read.nexus("../data/post.nex")
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- microsat.cent$bp.Mbp
names(bp.Mbp) <- row.names(microsat.cent)
# make named vector for type of centromere
holo.or.mono <- microsat.cent$holo.or.mono
names(holo.or.mono) <- row.names(microsat.cent)
#load in necessary packages
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../data/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../results/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#loop through to drop any unmatching data or tree tips
trees.pruned <- c()
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=dat.mic)[[1]]
}
# run aovphylo with phylogenetic correction
# make named vector for bpMbp coontent
bp.Mbp <- dat.mic$bp.Mbp
names(bp.Mbp) <- row.names(dat.mic)
# make named vector for orders
order <- as.factor(dat.mic$order)
names(order) <- row.names(dat.mic)
#read in insect phylogeny
trees <- read.nexus("../data/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../results/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
# Read data
files <- list.files("../data/busco", full.names = F)
#set working directory as figures/heatmap
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../../data/post.nex")
setwd("~/Documents/GitHub/microsat/figures/supp")
#load in the trees
trees <- read.nexus("../../data/post.nex")
#select a single tree to use
tree <- trees[[sample(1:100, 1)]]
rm(trees)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.trees <- c()
for(i in 1:100){
pruned.trees[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.tree <- pruned.trees[[sample(1:100, 1)]]
rm(trees, pruned.trees)
#set working directory as figures/heatmap
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.trees <- c()
for(i in 1:100){
pruned.trees[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.tree <- pruned.trees[[sample(1:100, 1)]]
rm(trees, pruned.trees)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
row.names(foo2) <- sp2
tips <- foo2$Average
names(tips) <- row.names(foo2)
#plot tree with bars
plotTree.wBars(tree = pruned.tree,
x = abs(tips))
View(foo2)
mean(foo2)
mean(foo2$Average)
#set working directory as figures/heatmap
#load in packages that are needed
library(phytools)
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.tree <- c()
for(i in 1:100){
pruned.tree[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.trees <- pruned.tree[[sample(1:100, 1)]]
rm(trees, pruned.tree)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.tree <- c()
for(i in 1:100){
pruned.tree[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.trees <- pruned.tree[[sample(1:100, 1)]]
rm(trees, pruned.trees)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
row.names(foo2) <- sp2
tips <- foo2$Average
names(tips) <- row.names(foo2)
#plot tree with bars
plotTree.wBars(tree = pruned.tree,
x = abs(tips))
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.tree <- c()
for(i in 1:100){
pruned.tree[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.trees <- pruned.tree[[sample(1:100, 1)]]
rm(trees, pruned.trees)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
#load in the trees
trees <- read.nexus("../../data/post.nex")
# drops the tip
pruned.trees <- c()
for(i in 1:100){
pruned.tree[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
for(i in 1:100){
pruned.trees[[i]] <- drop.tip(phy=trees[[i]], tip=c("B.terrestris",
"Plutella_xylostella",
"Timema_cristinae"))
}
#select a single tree to use
pruned.tree <- pruned.trees[[sample(1:100, 1)]]
rm(trees, pruned.trees)
#load in tip rate data
tips <- read.csv("../../results/tip.rates.csv", row.names = 1)
#subset out columns that we need
tips <- tips[101]
#this loop will make sure the tip labels and the microsat data are in the
#same order
foo2 <- tips
sp2 <- c()
for(i in 1:nrow(tips)){
hit2 <- which(row.names(tips)==pruned.tree$tip.label[i])
foo2[i, ] <- tips[hit2, ]
sp2[i] <- row.names(tips)[hit2]
}
row.names(foo2) <- sp2
tips <- foo2$Average
names(tips) <- row.names(foo2)
#plot tree with bars
plotTree.wBars(tree = pruned.tree,
x = abs(tips))
#set figrues as working directory
#load in libraries
library(geiger)
setwd("~/Documents/GitHub/microsat/analyses")
#set figrues as working directory
#load in libraries
library(geiger)
library(phylolm)
#read in csv with rates of evolution
rates <- read.csv("../results/tip.rates.csv",
row.names = 1)
#store the average rate in a named vector by species name
rates.species <- rates$Average
names(rates.species) <- row.names(rates)
#read in nmicrosatellite data
str <- read.csv("../data/micro.vs.chrom.csv")
str <- str[,1:3]
str$rates <- NA
str$species <- gsub(pattern = " ", replacement = "_", str$species)
#fix the names in the data that are different from the trees
str$species <- sub(pattern = "Harpergnathos_saltator",
replacement = "Harpegnathos_saltator", str$species)
str$species <- gsub(pattern = "helicoverpa_zea",
replacement = "Helicoverpa_zea", str$species)
str$species <- gsub(pattern = "papilio_polytes",
replacement = "Papilio_polytes", str$species)
str$species <- gsub(pattern = "Pogomyrmex_barbatus",
replacement = "Pogonomyrmex_barbatus", str$species)
str$species <- gsub(pattern = "Scaptodrosophila_lebanonesis",
replacement = "Scaptodrosophila_lebanonensis", str$species)
#assign rownames
row.names(str) <- str$species
#fill in the rates into the other data frame
for(i in 1:nrow(str)){
hit <- which(names(rates.species) == str$species[i])[1]
#fill in rates for those species that have a match in species column
str[i, 4:104] <- rates[hit, 1:100]
}
#clean environment
rm(list = c("rates", "hit", "i", "rates.species"))
#store cleaned up data in csv
write.csv(str, "../data/str.rates")
#read in trees
trees <- read.nexus("../data/post.nex")
#loops through the 100 posterior distribution trees and determines the data
#necessary for the p-value
pvals.rates <- beta.rates <- intercept <- c()
str$gsz <- str$gsz/1000000
for(i in 1:100){
print(i)
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=str)
#stores current trees data
tree.cur <- foo[[1]]
#stores p-value on phylolm analysis
fit <- phylolm(str[,(i+3)] ~ gsz,
data = str,
phy = tree.cur,
model = "BM",
boot = 100)
simp.mod <- lm(str[,(i+3)] ~ str$gsz)
cur.results <- summary(fit)
prop.var.exp[i] <- R2(fit, simp.mod, phy = tree.cur)[3]
pvals.rates[i] <- cur.results$coefficients[2,6]
beta.rates[i] <- cur.results$coefficients[2,1]
intercept[i] <- cur.results$coefficients[1,1]
}
prop.var.exp <- c()
for(i in 1:100){
print(i)
#stores tree number
tree.test <- trees[[i]]
#matches species within the dataset and the tree
foo <- treedata(phy = tree.test, data=str)
#stores current trees data
tree.cur <- foo[[1]]
#stores p-value on phylolm analysis
fit <- phylolm(str[,(i+3)] ~ gsz,
data = str,
phy = tree.cur,
model = "BM",
boot = 100)
simp.mod <- lm(str[,(i+3)] ~ str$gsz)
cur.results <- summary(fit)
prop.var.exp[i] <- R2(fit, simp.mod, phy = tree.cur)[3]
pvals.rates[i] <- cur.results$coefficients[2,6]
beta.rates[i] <- cur.results$coefficients[2,1]
intercept[i] <- cur.results$coefficients[1,1]
}
#make the results into a data frame
results <- data.frame(pvals.rates,beta.rates, intercept)
View(results)
sum(results$pvals.rates <0.05)
sum(results$pvals.rates < 0)
