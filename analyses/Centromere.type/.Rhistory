null.dist[i] <- mean(c(lake1,lake2)[pick]) - mean(c(lake1,lake2)[!pick])
}
sum(abs(null.dist)>=abs(obs.stat))/iter
t.test(lake1, lake2)
plot(density(log(lake1)))
lines(density(log(lake2)), col="red")
t.test(log(lake1), log(lake2))
null.dist <-c()
iter <- 100000
for(i in 1:iter){
pick <- sample(c(T,F), 1000, replace=T)
null.dist[i] <- mean(c(lake1,lake2)[pick]) - mean(c(lake1,lake2)[!pick])
}
obs.stat <- mean(lake1)-mean(lake2)
plot(density(null.dist))
sum(abs(null.dist)>=abs(obs.stat))/iter
median(c(1,7,100))
null.dist <-c()
iter <- 10000
for(i in 1:iter){
pick <- sample(c(T,F), 1000, replace=T)
null.dist[i] <- median(c(lake1,lake2)[pick]) - median(c(lake1,lake2)[!pick])
}
obs.stat <- median(lake1)-median(lake2)
plot(density(null.dist))
sum(abs(null.dist)>=abs(obs.stat))/iter
abline(h=obs.stat)
abline(v=obs.stat)
sum(abs(null.dist)>=abs(obs.stat))/iter
setwd("~/Desktop")
foo <- data.frame(lake1,lake2)
View(foo)
write.csv(foo, file="lake.csv",row.names = F)
foo
round(foo, digits=2)->bar
View(bar)
t.test(bar)
t.test(bar$lake1,bar$lake2)
t.test(log(bar$lake1),log(bar$lake2))
t.test(x=log(bar$lake1),y=log(bar$lake2))
min(bar)
sum(bar==0)
View(bar)
bar$lake1[bar$lake1==0] <- 0.01
bar$lake2[bar$lake2==0] <- 0.01
t.test(x=log(bar$lake1),y=log(bar$lake2))
write.csv(bar, file="lake.csv",row.names = F)
mouse <- matrix(0,75,4)
colnames(mouse) <- c("l.3sp","l.4sp", "l.5spl")
colnames(mouse) <- c("l.3sp","l.4sp", "l.5spl","run.speed")
mouse <- as.data.frame(mouse)
View(mouse)
mouse[1:25,1] <- 1
mouse[26:50,2] <- 1
mouse[51:75,3] <- 1
View(mouse)
mouse[1:25,4] <- rnorm(mean=.8, sd=.25)
mouse[1:25,4] <- rnorm(n=25, mean=.8, sd=.25)
mouse[26:50,4] <- rnorm(n=25, mean=.9, sd=.25)
mouse[51:75,4] <- rnorm(n=25, mean=1, sd=.25)
running.speed <- c(rnorm(n=25, mean=.8, sd=.25),
rnorm(n=25, mean=.9, sd=.25),
rnorm(n=25, mean=1, sd=.25))
injured.lam <- rep(c("l.3sp","l.4sp", "l.5spl"), each=25)
running.speed <- c(rnorm(n=25, mean=.8, sd=.25),
rnorm(n=25, mean=.9, sd=.25),
rnorm(n=25, mean=1, sd=.25))
injured.lam <- rep(c("l.3sp","l.4sp", "l.5spl"), each=25)
mouse <- data.frame(running.speed,injured.lam)
summary(aov(lm(mouse$running.speed~mouse$injured.lam)))
TukeyHSD(x=aov(lm(mouse$running.speed~mouse$injured.lam)))
running.speed <- c(rnorm(n=25, mean=.7, sd=.25),
rnorm(n=25, mean=.9, sd=.25),
rnorm(n=25, mean=1, sd=.25))
injured.lam <- rep(c("l.3sp","l.4sp", "l.5spl"), each=25)
mouse <- data.frame(running.speed,injured.lam)
summary(aov(lm(mouse$running.speed~mouse$injured.lam)))
TukeyHSD(x=aov(lm(mouse$running.speed~mouse$injured.lam)))
running.speed <- c(rnorm(n=25, mean=.7, sd=.25),
rnorm(n=25, mean=.9, sd=.25),
rnorm(n=25, mean=.95, sd=.25))
injured.lam <- rep(c("l.3sp","l.4sp", "l.5spl"), each=25)
mouse <- data.frame(running.speed,injured.lam)
summary(aov(lm(mouse$running.speed~mouse$injured.lam)))
TukeyHSD(x=aov(lm(mouse$running.speed~mouse$injured.lam)))
running.speed <- round(c(rnorm(n=25, mean=.7, sd=.25),
rnorm(n=25, mean=.9, sd=.25),
rnorm(n=25, mean=.95, sd=.25)),digits=2)
injured.lam <- rep(c("l.3sp","l.4sp", "l.5spl"), each=25)
mouse <- data.frame(running.speed,injured.lam)
summary(aov(lm(mouse$running.speed~mouse$injured.lam)))
TukeyHSD(x=aov(lm(mouse$running.speed~mouse$injured.lam)))
write.csv(mouse, file="mouse.csv",row.names = F)
binom.test(342, 600, .5)
binom.test(258, 600, .5)
35-9
setwd("~/Desktop/Dropbox/gitrepos/coleoguy.github.io/teaching/expdes/midterm.files")
dat <- read.csv("mouseA.csv")
summary(aov(lm(dat$running.speed~dat$injured.lam)
)
)
total <- 342+290
total <- 342+290
binom.test(342, total, .5)
binom.test(290, total, .5)
fish <- read.csv("lakeA.csv")
t.test(x=fish$lake1, y=fish$lake2)
# wo transform pvalue is 0.088
t.test(x=log(fish$lake1), y=log(fish$lake2))
help(log)
t.test(x=log10(fish$lake1), y=log10(fish$lake2))
mouse <- read.csv("mouseA.csv")
summary(aov(lm(dat$running.speed~dat$injured.lam)
summary(aov(lm(dat$running.speed~dat$injured.lam))
summary(aov(lm(dat$running.speed~dat$injured.lam)))
summary(aov(lm(mouse$running.speed~mouse$injured.lam)))
res <- aov(lm(mouse$running.speed~mouse$injured.lam))
TukeyHSD(res)
mouse <- read.csv("mouseA.csv")
res <- aov(lm(mouse$running.speed~mouse$injured.lam))
summary(res)
# pval is 1.32x10^-5
TukeyHSD(res)
binom.test(290, total, .5, alternative = "l")
94/105
112/105
65/105
77/105
genome <- 1:100
wildtype <- sample(genome, size=10000, prob=c(rep(.1,10), rep(1,90)))
wildtype <- sample(genome, size=10000, prob=c(rep(.1,10), rep(1,90)), replace=T)
table(wildtype)
cov <- as.data.frame(table(wildtype))
View(cov)
mutant <- sample(genome, size=10000, prob=c(rep(.3,10), rep(1,90)), replace=T)
covm <- as.data.frame(table(wildtype))
plot(x=1:100, y=cov$Freq)
plot(x=1:100, y=cov$Freq, type="l")
lines(x=1:100, y=covm$Freq)
cov$Freq
covm$Freq
covm <- as.data.frame(table(mutant))
plot(x=1:100, y=cov$Freq, type="l")
lines(x=1:100, y=covm$Freq)
mean(covm$Freq[1:10])
mean(cov$Freq[1:10])
mean(covm$Freq[11:100])
mean(cov$Freq[11:100])
109.81/107.63
wildtype <- sample(genome, size=50000, prob=c(rep(.1,10), rep(1,90)), replace=T)
cov <- as.data.frame(table(wildtype))
mutant <- sample(genome, size=10000, prob=c(rep(.3,10), rep(1,90)), replace=T)
covm <- as.data.frame(table(mutant))
plot(x=1:100, y=cov$Freq, type="l")
lines(x=1:100, y=covm$Freq)
plot(x=1:100, y=cov$Freq, type="l",col="red")
lines(x=1:100, y=covm$Freq)
set.seed(4)
sample(c("michelle","sarah"), size=1)
hist(sample(1:100, size=100000, replace=T))
install.packages("viridis")
#load in necessary packages
library(phytools)
library(geiger)
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/Centromere.type")
#read in insect phylogeny
tree <- read.nexus("data/tree/tree.nex")
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/Centromere.type")
#read in insect phylogeny
tree <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/centromere.type.csv",
as.is=T,
row.names = 4)
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
View(dat.centromere)
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)[,4]
dat.centromere
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
tree <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees)
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
#make a vector to store the simmaps
histories <- list()
#loop through making simmaps for each of the 100 trees
for(i in 1:100){
histories[[i]] <- make.simmap(tree.drop[[i]],
cent.type,
model="ARD",
pi="estimated")
}
#loop through making simmaps for each of the 100 trees
for(i in 1:100){
histories[[i]] <- make.simmap(trees.pruned[[i]],
cent.type,
model="ARD",
pi="estimated")
}
help("brownieREML")
#make the class of the simmaps of type Phylo
class(histories) <- "simmap"
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
View(dat.mic)
#set up lists to store likelihood ratio tests and
lrtest.res <- brownie.results <- list()
dat.mic$all/(dat.mic$gsz/1000000)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000000)
names(bpMbp) <- row.names(dat.mic)
i<-1
foo <- brownieREML(tree = histories[[i]], x = bpMbp)
foo
foo <- brownieREML(tree = histories[[i]], x = bpMbp)
foo
i<-2
brownieREML(tree = histories[[i]], x = bpMbp)
i<-20
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[60]], x = bpMbp)
hist(dat.mic$gsz)
range(dat.mic$gsz)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#set up lists to store likelihood ratio tests and
lrtest.res <- brownie.results <- list()
bpMbp <- dat.mic$all/(dat.mic$gsz/1000000)
names(bpMbp) <- row.names(dat.mic)
print(paste("Running sample", i))
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[i]], x = bpMbp)
brownieREML(tree = histories[[i]], x = bpMbp)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
View(dat.mic)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#set up lists to store likelihood ratio tests and
lrtest.res <- brownie.results <- list()
bpMbp <- dat.mic$all/(dat.mic$gsz/1000000)
names(bpMbp) <- row.names(dat.mic)
brownieREML(tree = histories[[i]], x = bpMbp)
#loop through
for(i in 1:100){
print(paste("Running sample", i))
species.test[[i]] <- brownieREML(tree = histories[[i]], x = bpMbp)
#lrtest.store[[j]] <- lrtest(order.test[[j]])
}
brownie.results[[i]] <- brownieREML(tree = histories[[i]], x = bpMbp)
brownie.results[[i]] <- brownieREML(tree = histories[[i]], x = bpMbp)
1-pchisq(2 * (-brownie.results[[i]]$logL1 +
brownie.results[[i]]$logL.multiple),1)
brownie.results[[i]]
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
brownie.results[[i]] <- brownieREML(tree = histories[[i]], x = bpMbp)
brownie.results[[i]]
1-pchisq(2 * (-brownie.results[[i]]$logL1 +
brownie.results[[i]]$logL.multiple),1)
# setup dataframe for results
results <- as.data.frame(matrix(NA,100, 4))
colnames(results) <- c("pval","rate.mon","rate.hol","conv")
View(results)
brownieREML(tree = histories[[i]], x = bpMbp) ->foo
foo$vcv.multiple
foo$convergence
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp)
brownie.fit$sig2.multiple
brownie.fit$sig2.multiple->bbar
#loop through
for(i in 1:100){
print(paste("Running sample", i))
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp)
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol <- brownie.fit$sig2.multiple[1]
results$rate.mon <- brownie.fit$sig2.multiple[2]
results$conv <- brownie.fit$convergence
}
# setup dataframe for results
results <- as.data.frame(matrix(NA,100, 4))
colnames(results) <- c("pval","rate.mon","rate.hol","conv")
#loop through
for(i in 1:100){
print(paste("Running sample", i))
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp, maxit = 10000)
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol <- brownie.fit$sig2.multiple[1]
results$rate.mon <- brownie.fit$sig2.multiple[2]
results$conv <- brownie.fit$convergence
}
View(results)
View(results)
#loop through
for(i in 1:100){
print(paste("Running sample", i))
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp, maxit = 10000)
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol[i] <- brownie.fit$sig2.multiple[1]
results$rate.mon[i] <- brownie.fit$sig2.multiple[2]
results$conv[i] <- brownie.fit$convergence
}
#loop through
for(i in 1:100){
print(paste("Running sample", i))
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp, maxit = 50000)
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol[i] <- brownie.fit$sig2.multiple[1]
results$rate.mon[i] <- brownie.fit$sig2.multiple[2]
results$conv[i] <- brownie.fit$convergence
}
View(results)
#loop through
for(i in 1:100){
print(paste("Running sample", i))
brownie.fit <- brownieREML(tree = histories[[i]], x = bpMbp, maxit = 100000)
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol[i] <- brownie.fit$sig2.multiple[1]
results$rate.mon[i] <- brownie.fit$sig2.multiple[2]
results$conv[i] <- brownie.fit$convergence
}
View(results)
View(results)
sum(results$conv !="Optimization has converged.")
which(results$conv !="Optimization has converged.")
bad <- which(results$conv !="Optimization has converged.")
#loop through
for(i in 1:100){
print(paste("Running sample", i))
working <- T
while(working){
brownie.fit <- brownieREML(tree = histories[[i]],
x = bpMbp, maxit = 100000)
if(brownie.fit$convergence=="Optimization has converged."){
working <- F
}
}
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol[i] <- brownie.fit$sig2.multiple[1]
results$rate.mon[i] <- brownie.fit$sig2.multiple[2]
results$conv[i] <- brownie.fit$convergence
}
View(results)
sum(results$pval<=.05)
results$pval[results$pval>.05]
boxplot(results[,2:3])
View(results)
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/Centromere.type")
#write a csv with the brownieREML data
write.csv(results, file = "../../results/cent.vs.rate.csv")
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
#make a vector to store the simmaps
histories <- list()
#loop through making simmaps for each of the 100 trees
for(i in 1:100){
print(paste("working on tree", i))
histories[[i]] <- make.simmap(trees.pruned[[i]],
cent.type,
model="ARD",
pi="estimated")
}
#make the class of the simmaps of type Phylo
class(histories) <- "simmap"
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
# setup dataframe for results
results <- as.data.frame(matrix(NA,100, 4))
colnames(results) <- c("pval","rate.mon","rate.hol","conv")
#loop through
for(i in 1:100){
print(paste("Running sample", i))
working <- T
while(working){
brownie.fit <- brownieREML(tree = histories[[i]],
x = bpMbp, maxit = 100000)
if(brownie.fit$convergence=="Optimization has converged."){
working <- F
}
}
results$pval[i] <- 1-pchisq(2 * (-brownie.fit$logL1 +
brownie.fit$logL.multiple),1)
results$rate.hol[i] <- brownie.fit$sig2.multiple[1]
results$rate.mon[i] <- brownie.fit$sig2.multiple[2]
results$conv[i] <- brownie.fit$convergence
}
View(results)
sum(results$pval<=.05)
results$pval[results$pval>.05]
