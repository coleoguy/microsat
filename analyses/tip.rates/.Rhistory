xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
#plot the total microsatellite content to the contig N50
plot(dat$Contig.N50, dat$X2.6mer,
xlab = "Contig N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
#plot the total microsatellite content to the scaffold N50
plot(dat$Scaffold.N50, dat$X2.6mer,
xlab = "Scaffold N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
par(mfcol=c(3,1))
#par(oma=c(2,1,1,1))
par(mar=c(4,4,1,1))
#plot the total microsatellite content to the genome size
plot(dat$Genome.Size, dat$X2.6mer,
xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
#plot the total microsatellite content to the contig N50
plot(dat$Contig.N50, dat$X2.6mer,
xlab = "Contig N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
#plot the total microsatellite content to the scaffold N50
plot(dat$Scaffold.N50, dat$X2.6mer,
xlab = "Scaffold N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,
maxColorValue = 255))
par(mfcol=c(3,1))
#par(oma=c(2,1,1,1))
par(mar=c(4,4,1,1))
#plot the total microsatellite content to the genome size
plot(dat$Genome.Size, dat$X2.6mer,
xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,200, maxColorValue = 255), pch=16)
#plot the total microsatellite content to the contig N50
plot(dat$Contig.N50, dat$X2.6mer,
xlab = "Contig N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,200, maxColorValue = 255), pch=16)
#plot the total microsatellite content to the scaffold N50
plot(dat$Scaffold.N50, dat$X2.6mer,
xlab = "Scaffold N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,200, maxColorValue = 255), pch=16)
par(mfcol=c(3,1))
#par(oma=c(2,1,1,1))
par(mar=c(4,4,1,1))
alpha <- 100
#plot the total microsatellite content to the genome size
plot(dat$Genome.Size, dat$X2.6mer,
xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
#plot the total microsatellite content to the contig N50
plot(dat$Contig.N50, dat$X2.6mer,
xlab = "Contig N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
#plot the total microsatellite content to the scaffold N50
plot(dat$Scaffold.N50, dat$X2.6mer,
xlab = "Scaffold N50",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
fit1 <- summary(lm(dat$Genome.Size ~ dat$`2.6mermb`))
fit2 <- summary(lm(dat$Contig.N50  ~ dat$`2.6mermb`))
fit3 <- summary(lm(dat$Scaffold.N50 ~ dat$`2.6mermb`))
fit1$coefficients
fit1$coefficients[2,4]
round(fit1$coefficients[2,4], digits=3)
#plot the total microsatellite content to the genome size
plot(dat$Genome.Size ~ dat$`2.6mermb`,
xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
summary(lm(dat$Genome.Size ~ dat$X2.6mer))
summary(lm(dat$Genome.Size ~ dat$X2.6mermb))
summary(lm(dat$Genome.Size ~ dat$X2.6mermb`))
summary(lm(dat$Genome.Size ~ dat$`X2.6mermb`))
summary(lm(dat$Genome.Size ~ dat$`2.6mermb`))
round(fit1$coefficients[2,4], digits=3)
help("text")
plot(dat$Genome.Size ~ dat$`2.6mermb`,
xlab = "Genome Size in Gbp",
ylab = "2-6mer bps",
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""))
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""), pos=1)
text(y=max(dat$Genome.Size), x=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""), pos=1)
fit1 <- summary(lm(dat$`2.6mermb` ~ dat$Genome.Size))
fit2 <- summary(lm(dat$`2.6mermb` ~ dat$Contig.N50))
fit3 <- summary(lm(dat$`2.6mermb` ~ dat$Scaffold.N50))
summary(lm(dat$`2.6mermb` ~ dat$Genome.Size))
summary(lm(dat$`2.6mermb` ~ dat$Contig.N50))
summary(lm(dat$`2.6mermb` ~ dat$Scaffold.N50))
par(mar=c(4,4,1,1))
alpha <- 100
ylab="2-6mer (bp/mb)"
#plot the total microsatellite content to the genome size
plot(dat$`2.6mermb` ~ dat$Genome.Size,
xlab = "Genome Size in Gbp",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(y=max(dat$Genome.Size), x=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""), pos=1)
help(text)
par(mar=c(4,4,1,1))
alpha <- 100
ylab="2-6mer (bp/mb)"
#plot the total microsatellite content to the genome size
plot(dat$`2.6mermb` ~ dat$Genome.Size,
xlab = "Genome Size in Gbp",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""), pos=2)
par(mar=c(4,4,1,1))
alpha <- 100
ylab="2-6mer (bp/mb)"
#plot the total microsatellite content to the genome size
plot(dat$`2.6mermb` ~ dat$Genome.Size,
xlab = "Genome Size in Gbp",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`),
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
par(mfcol=c(3,1))
#par(oma=c(2,1,1,1))
par(mar=c(4,4,1,1))
alpha <- 100
ylab="2-6mer (bp/mb)"
#plot the total microsatellite content to the genome size
plot(dat$`2.6mermb` ~ dat$Genome.Size,
xlab = "Genome Size in Gbp",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
#plot the total microsatellite content to the contig N50
plot(dat$`2.6mermb` ~ dat$Contig.N50,
xlab = "Contig N50",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit2$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
#plot the total microsatellite content to the scaffold N50
plot(dat$`2.6mermb` ~ dat$Scaffold.N50,
xlab = "Scaffold N50",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit3$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
par(mfcol=c(3,1))
#par(oma=c(2,1,1,1))
par(mar=c(4,4,1,1))
alpha <- 100
ylab="2-6mer (bp/mb)"
#plot the total microsatellite content to the genome size
plot(dat$`2.6mermb` ~ dat$Genome.Size,
xlab = "Genome Size in Gbp",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit1$coefficients[2,4], digits=3)
text(x=max(dat$Genome.Size), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
#plot the total microsatellite content to the contig N50
plot(dat$`2.6mermb` ~ dat$Contig.N50,
xlab = "Contig N50",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit2$coefficients[2,4], digits=3)
text(x=max(dat$Contig.N50), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
#plot the total microsatellite content to the scaffold N50
plot(dat$`2.6mermb` ~ dat$Scaffold.N50,
xlab = "Scaffold N50",
ylab = ylab,
col = rgb(250, 159, 181,alpha, maxColorValue = 255), pch=16)
pval <- round(fit3$coefficients[2,4], digits=3)
text(x=max(dat$Scaffold.N50), y=max(dat$`2.6mermb`)-50,
labels= paste("p-value=", pval, sep=""), pos=2,cex=.7)
# export 3"x8"
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/Centromere.type")
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
# remove "Timema_cristinae" this species is not place
# in the tree correctly
foo <- list()
for(i in 1:100){
foo[[i]] <- drop.tip(trees.pruned[[i]], tip="Timema_cristinae")
}
trees.pruned <- foo
rm(foo)
# also remove this data from the data
cent.type <- cent.type[names(cent.type)!="Timema_cristinae"]
#make a vector to store the simmaps
histories <- list()
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
# remove "Timema_cristinae" this species is not place
# in the tree correctly
foo <- list()
for(i in 1:100){
foo[[i]] <- drop.tip(trees.pruned[[i]], tip="Timema_cristinae")
}
trees.pruned <- foo
rm(foo)
# also remove this data from the data
cent.type <- cent.type[names(cent.type)!="Timema_cristinae"]
#make a vector to store the simmaps
histories <- list()
rm(i)
rm(histories)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
#load in necessary packages
library(phytools)
library(geiger)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in centromere data
#row names sets the species columns as row names for the data
dat.centromere <- read.csv("../../data/traits/centromere.type.csv",
as.is=T,
row.names = 4)
# converting data to a named vector
#load in the centromere type
cent.type <- dat.centromere[,4]
#name the centromere type vector
names(cent.type) <- row.names(dat.centromere)
rm(dat.centromere)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=cent.type)[[1]]
}
rm(trees, i)
# remove "Timema_cristinae" this species is not place
# in the tree correctly
foo <- list()
for(i in 1:100){
foo[[i]] <- drop.tip(trees.pruned[[i]], tip="Timema_cristinae")
}
trees.pruned <- foo
rm(foo)
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
#load in necessary packages
library(phytools)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
#load in necessary packages
library(phytools)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=dat.mic)[[1]]
}
rm(trees, i)
foo<- trees.pruned[[1]]
foo$tip.label
#load in necessary packages
library(phytools)
#read in insect phylogeny
trees <- read.nexus("../../data/trees/post.nex")
#read in the microsatellite data
dat.mic <- read.csv("../../results/ssr.inference/micRocounter_results_TII.csv",
as.is = T, row.names = 4)
# match up tree and data
trees.pruned <- list()
#loop through to drop any unmatching data or tree tips
for(i in 1:100){
trees.pruned[[i]] <- treedata(phy = trees[[i]], data=dat.mic)[[1]]
}
rm(trees, i)
bpMbp <- dat.mic$all/(dat.mic$gsz/1000)
names(bpMbp) <- row.names(dat.mic)
rm(dat.mic)
foo <- ace(x=bpMbp, phy=trees.pruned[[1]], model="BM")
foo$ace
foo$sigma2
plot(trees.pruned[[1]],show.tip.label = F)
plot(trees.pruned[[1]],show.tip.label = F)
nodelabels(frame="n",cex=.5)
tiplabels(frame="n",cex=.5)
trees.pruned[[1]]$edge
trees.pruned[[1]]$edge.length
trees.pruned[[1]]$edge
tip.val <- c()
for(i in 1:nrow(trees.pruned[[1]]$edge)){
val <- trees.pruned[[1]]$edge[i, 2]
if(!val %in% trees.pruned[[1]]$edge[i, 1]){
tip.branch <- c(tip.branch, val)
}
}
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[1]]$edge)){
val <- trees.pruned[[1]]$edge[i, 2]
if(!val %in% trees.pruned[[1]]$edge[i, 1]){
tip.branch <- c(tip.branch, val)
}
}
tip.bbranch
tip.branch
i<- 1
val <- trees.pruned[[1]]$edge[i, 2]
val %in% trees.pruned[[1]]$edge[i, 1]
trees.pruned[[1]]$edge[i, 1]->foobbar
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[1]]$edge)){
val <- trees.pruned[[1]]$edge[i, 2]
if(!val %in% trees.pruned[[1]]$edge[, 1]){
tip.branch <- c(tip.branch, val)
}
}
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[1]]$edge)){
val <- trees.pruned[[1]]$edge[i, 2]
if(!val %in% trees.pruned[[1]]$edge[, 1]){
tip.branch <- c(tip.branch, i)
}
}
trees.pruned[[1]]$edge.length
tip.branch
trees.pruned[[1]]$edge.length[tip.branch]
foo$ace
trees.pruned[[1]]$edge[tip.branch[1]]
trees.pruned[[1]]$edge[tip.branch[1], ]
trees.pruned[[1]]$edge[tip.branch[1], ]
foo$ace
trees.pruned[[1]]$edge[tip.branch[1], ]
trees.pruned[[1]]$edge[tip.branch[1], 1]
foo$ace[trees.pruned[[1]]$edge[tip.branch[1], 1]]
wanted.node <- trees.pruned[[1]]$edge[tip.branch[1], 1]
foo$ace[names(foo$ace) == wanted.node]
anc.state <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
trees.pruned[[1]]$tip.label
names(bpMbp) == trees.pruned[[1]]$tip.label
# estimate ancestral states
foo <- ace(x=bpMbp, phy=trees.pruned[[1]], model="BM")
# get tip branches
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[1]]$edge)){
val <- trees.pruned[[1]]$edge[i, 2]
if(!val %in% trees.pruned[[1]]$edge[, 1]){
tip.branch <- c(tip.branch, i)
}
}
anc.state <- c()
for(j in 1:length(tip.branch)){
# get node microsatellite estimate
trees.pruned[[1]]$edge.length[tip.branch]
wanted.node <- trees.pruned[[1]]$edge[tip.branch[1], 1]
anc.state[j] <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
}
anc.state <- c()
for(j in 1:length(tip.branch)){
# get node microsatellite estimate
trees.pruned[[1]]$edge.length[tip.branch]
wanted.node <- trees.pruned[[1]]$edge[tip.branch[j], 1]
anc.state[j] <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
}
plot(trees.pruned,cex=.5)
plot(trees.pruned[[1]],cex=.5)
trees.pruned[[1]]$tip.label
j <- 1
curr.sp <- trees.pruned[[1]]$tip.label[j]
bpMbp
curr.sp <- trees.pruned[[1]]$tip.label[j]
bpMbp[names(bpMbp) == curr.sp]
anc.state <- c()
for(j in 1:length(tip.branch)){
# get node microsatellite estimate
trees.pruned[[1]]$edge.length[tip.branch]
wanted.node <- trees.pruned[[1]]$edge[tip.branch[j], 1]
anc.state[j] <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
}
curr.state <- c()
for(j in 1:length(tip.branch)){
curr.sp <- trees.pruned[[1]]$tip.label[j]
curr.state <- bpMbp[names(bpMbp) == curr.sp]
}
anc.state - curr.state
(anc.state - curr.state)/trees.pruned[[1]]$edge.length[tip.branch]
for(k in 1:100){
print(k)
# estimate ancestral states
foo <- ace(x=bpMbp, phy=trees.pruned[[k]], model="BM")
# get tip branches
tip.branch <- c()
for(i in 1:nrow(trees.pruned[[k]]$edge)){
val <- trees.pruned[[k]]$edge[i, 2]
if(!val %in% trees.pruned[[k]]$edge[, 1]){
tip.branch <- c(tip.branch, i)
}
}
anc.state <- c()
for(j in 1:length(tip.branch)){
# get node microsatellite estimate
trees.pruned[[k]]$edge.length[tip.branch]
wanted.node <- trees.pruned[[k]]$edge[tip.branch[j], 1]
anc.state[j] <- as.numeric(foo$ace[names(foo$ace) == wanted.node])
}
curr.state <- c()
for(j in 1:length(tip.branch)){
curr.sp <- trees.pruned[[k]]$tip.label[j]
curr.state <- bpMbp[names(bpMbp) == curr.sp]
}
tip.rates <- (anc.state - curr.state) /
trees.pruned[[k]]$edge.length[tip.branch]
names(tip.rates) <- trees.pruned[[k]]$tip.label
if(k == 1){
tipp.rates <- tip.rates
}else{
tipp.rates <- cbind(tipp.rates, tip.rates)
}
}
View(tipp.rates)
setwd("~/Desktop/Dropbox/gitrepos/microsat/analyses/tip.rates")
write.csv(tipp.rates, file="tip.rates.csv",row.names = F)
colnames(tipp.rates) <- paste("tree", 1:100)
View(tipp.rates)
write.csv(tipp.rates, file="tip.rates.csv",row.names = F)
foo <- read.csv("tip.rates.csv")
View(foo)
colnames(tipp.rates) <- paste("tree", 1:100)
write.csv(tipp.rates, file="tip.rates.csv",row.names = T)
foo <- read.csv("tip.rates.csv")
View(foo)
colnames(tipp.rates) <- paste("tree", 1:100)
write.csv(tipp.rates, file="tip.rates.csv")
foo <- read.csv("tip.rates.csv", row.names = F)
foo <- read.csv("tip.rates.csv", row.names = 1)
View(foo)
